{"version":3,"sources":["reportWebVitals.ts","awf.model.ts","CitySelector.tsx","constant.ts","WeatherCard.tsx","WeatherPanel.tsx","WeeklyForecast.tsx","PastForecast.tsx","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","DEFINED_CITIES","id","name","latitude","longitude","CitySelector","props","change","event","chosenValue","find","el","target","value","setState","state","currentCity","console","log","onChange","cityOptions","map","city","className","this","disabled","selected","hidden","React","Component","WEEKLY_WEATHER_API_ROUTE","WEATHER_IN_PAST_API_ROUTE","WeatherCard","weather","unixTime","dt","Date","toLocaleDateString","day","month","year","icon","temp","WeatherPanel","useState","weatherReports","setWeatherReports","buildPath","apiURL","certainDate","url","URL","pathParams","searchParams","set","toString","getTime","search","parseResponse","result","data","weekly","Array","isArray","daily","length","reports","forEach","max","push","current","report","useEffect","date","axios","get","error","getWeeklyWeatherReport","weatherCards","slice","WeeklyForecast","undefined","handleCityChange","PastForecast","setCity","setDate","maxDate","toISOString","substring","type","valueAsDate","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.96fc213f.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export interface AWFCity {\r\n    id: string;\r\n    name: string;\r\n    latitude: number;\r\n    longitude: number;\r\n}\r\n\r\nexport interface WeatherReportItem {\r\n    temp?: number; //For temperature in Celsius and wind speed in meter/sec, use units=metric\r\n    dt?: number; // Requested time\r\n    icon?: string;\r\n}\r\n\r\nexport const DEFINED_CITIES: AWFCity[] = [\r\n    {\r\n        id: \"1\",\r\n        name: \"Самара\",\r\n        latitude: 53.195873,\r\n        longitude: 50.100193\r\n    },\r\n    {\r\n        id: \"2\",\r\n        name: \"Тольятти\",\r\n        latitude: 53.507836,\r\n        longitude: 49.420393\r\n    },\r\n    {\r\n        id: \"3\",\r\n        name: \"Саратов\",\r\n        latitude: 51.533557,\r\n        longitude: 46.034257\r\n    },\r\n    {\r\n        id: \"4\",\r\n        name: \"Казань\",\r\n        latitude: 55.796127,\r\n        longitude: 49.106405\r\n    },\r\n    {\r\n        id: \"5\",\r\n        name: \"Краснодар\",\r\n        latitude: 45.035470,\r\n        longitude: 38.975313\r\n    }\r\n];\r\n","import React from 'react';\r\nimport {AWFCity, DEFINED_CITIES} from './awf.model';\r\n\r\ninterface CitySelectorProps {\r\n    onChange: any;\r\n}\r\n\r\ninterface CitySelectorState {\r\n    currentCity?: AWFCity | null;\r\n}\r\n\r\nclass CitySelector extends React.Component<CitySelectorProps, CitySelectorState> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentCity: null\r\n        }\r\n    }\r\n\r\n    change = (event: any) => {\r\n        const chosenValue: AWFCity | undefined = DEFINED_CITIES.find((el: any) => el.id === event.target.value);\r\n        this.setState((state, props) => {\r\n            return {currentCity: chosenValue }\r\n        });\r\n        console.log(\"Chosen city: \" + chosenValue?.name);\r\n        this.props.onChange(chosenValue);\r\n    }\r\n\r\n    render() {\r\n        const cityOptions = DEFINED_CITIES.map((city: AWFCity) => <option key={city.id}\r\n                                                                          value={city.id}>{city.name}</option>);\r\n\r\n        return (\r\n            <select className={\"awf-field\"} onChange={this.change}>\r\n                <option value=\"\" disabled selected hidden>Select city</option>\r\n                {cityOptions}</select>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CitySelector;\r\n","export const WEATHER_MAP_API_KEY: string = \"40537f711a3e40204f77fbad85878b95\";\r\n\r\n// See https://openweathermap.org/api/one-call-api\r\nexport const WEEKLY_WEATHER_API_ROUTE: string = \"https://api.openweathermap.org/data/2.5/onecall?units=metric&lat={lat}&lon={lon}&appid={API key}\";\r\n// See https://openweathermap.org/api/one-call-api#history\r\nexport const WEATHER_IN_PAST_API_ROUTE: string = \"https://api.openweathermap.org/data/2.5/onecall/timemachine?units=metric&lat={lat}&lon={lon}&dt={time}&appid={API key}\";\r\n\r\n// Weather icons, see https://openweathermap.org/weather-conditions\r\nexport const WEATHER_ICONS_API_ROUTE: string = \"http://openweathermap.org/img/wn/{icon}@2x.png\";\r\n","import React from 'react';\r\nimport {WeatherReportItem} from \"./awf.model\";\r\n\r\ninterface WeatherCardProps {\r\n    weather?: WeatherReportItem\r\n}\r\n\r\nfunction WeatherCard(props: WeatherCardProps) {\r\n\r\n    function formatTime(unixTime: number | undefined) {\r\n        return unixTime ? new Date(unixTime * 1e3).toLocaleDateString(\"en-US\", {\r\n            day: 'numeric',\r\n            month: 'short',\r\n            year: 'numeric'\r\n        }) : \"\";\r\n    }\r\n\r\n    if (!props.weather) {\r\n        return (<div className=\"awf-weather-card\">\r\n            <div className={\"awf-weather-icon\"}>\r\n            </div>\r\n            <p className={\"awf-label\"}>Fill in all the fields and the weather will be displayed</p>\r\n        </div>);\r\n    }\r\n\r\n    return (\r\n        <div className=\"awf-weather-card _filled\">\r\n            <div className=\"awf-weather-card__date\">\r\n                {formatTime(props.weather.dt)}\r\n\r\n            </div>\r\n            <div className=\"awf-weather-card__icon\">\r\n                {props.weather.icon}\r\n\r\n            </div>\r\n            <div className=\"awf-weather-card__temp\">\r\n                {(props.weather.temp && props.weather.temp > 0) ? '+' : '-'}\r\n                {props.weather.temp}°\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherCard;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {AWFCity, WeatherReportItem} from \"./awf.model\";\r\nimport {WEATHER_IN_PAST_API_ROUTE, WEATHER_MAP_API_KEY, WEEKLY_WEATHER_API_ROUTE} from \"./constant\";\r\nimport axios from \"axios\";\r\nimport WeatherCard from './WeatherCard';\r\n\r\ninterface WeatherPanelProps {\r\n    city?: AWFCity,\r\n    weekly: boolean,\r\n    date?: Date\r\n}\r\n\r\nfunction WeatherPanel(props: WeatherPanelProps) {\r\n    const [weatherReports, setWeatherReports] = useState<WeatherReportItem[]>([]);\r\n    let startViewIndex: number = 0;\r\n    const MAX_CARDS_NUMBER: number = 3;\r\n\r\n    useEffect(() => {\r\n        console.log(\"WeatherPanel Use effect hook worked\");\r\n        if (!weatherReports.length) {\r\n            if (!!props?.city && !!props.date) {\r\n                getDailyWeatherReport(props.city, props.date);\r\n            }\r\n\r\n            if (!!props?.city && props.weekly) {\r\n                getWeeklyWeatherReport(props.city);\r\n            }\r\n        }\r\n    });\r\n\r\n    function buildPath(apiURL: string, latitude: number, longitude: number, certainDate?: Date): string {\r\n        const url = new URL(apiURL);\r\n        const pathParams = url.searchParams;\r\n        pathParams.set('lat', latitude.toString());\r\n        pathParams.set('lon', longitude.toString());\r\n        if (certainDate) {\r\n            pathParams.set('dt', (certainDate.getTime() / 1000).toString());\r\n        }\r\n\r\n        pathParams.set('appid', WEATHER_MAP_API_KEY);\r\n        url.search = pathParams.toString();\r\n        console.log(\"url: \" + url);\r\n        return url.toString();\r\n    }\r\n\r\n    function parseResponse(result: any): void {\r\n        console.log(\"Response: \" + result.data);\r\n        if (props.weekly) {\r\n            if (Array.isArray(result.data.daily) && result.data.daily.length > 0) {\r\n                const reports: WeatherReportItem[] = [];\r\n                result.data.daily.forEach((el: any) => {\r\n                    const weather: WeatherReportItem = {\r\n                        temp: el.temp.max,\r\n                        dt: el.dt,\r\n                        icon: Array.isArray(el.weather) && el.weather.length > 0 ? el.weather[0].icon : \"\"\r\n                    }\r\n                    reports.push(weather);\r\n                });\r\n                setWeatherReports(reports);\r\n            }\r\n        } else {\r\n            if (result.data.current) {\r\n                const report: WeatherReportItem = {\r\n                    temp: result.data.current.temp,\r\n                    dt: result.data.current.dt,\r\n                    icon: Array.isArray(result.data.current.weather) && result.data.current.weather.length > 0 ? result.data.current.weather[0].icon : \"\"\r\n                }\r\n                setWeatherReports([report]);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function getDailyWeatherReport(city: AWFCity, certainDate: Date): void {\r\n        axios.get(buildPath(WEATHER_IN_PAST_API_ROUTE, city.latitude, city.longitude, certainDate))\r\n            .then(\r\n                (result: any) => {\r\n                    parseResponse(result);\r\n                },\r\n                (error) => {\r\n                    console.log(\"Error occurred: \" + error);\r\n                }\r\n            )\r\n    }\r\n\r\n    function getWeeklyWeatherReport(city: AWFCity): void {\r\n        axios.get(buildPath(WEEKLY_WEATHER_API_ROUTE, city.latitude, city.longitude))\r\n            .then((result: any) => {\r\n                    parseResponse(result);\r\n                },\r\n                (error) => {\r\n                    console.log(\"Error occurred: \" + error);\r\n                }\r\n            );\r\n    }\r\n\r\n    if (Array.isArray(weatherReports) && weatherReports.length > 0) {\r\n        if (weatherReports.length === 1) {\r\n            return (<div className=\"awf-weather-report\">\r\n                <WeatherCard weather={weatherReports[0]}/>\r\n            </div>);\r\n        }\r\n\r\n        const weatherCards = weatherReports?.map((report: WeatherReportItem) => <WeatherCard weather={report}/>);\r\n\r\n        return (<div className=\"awf-weather-report\">\r\n            <button className=\"awf-weather-report_button _left\"></button>\r\n            {weatherCards.slice(startViewIndex, MAX_CARDS_NUMBER)}\r\n            <button className=\"awf-weather-report_button _right\"></button>\r\n        </div>);\r\n    }\r\n\r\n    return (<div className=\"awf-weather-report _empty\">\r\n        <WeatherCard/>\r\n    </div>);\r\n}\r\n\r\nexport default WeatherPanel;\r\n","import React from 'react';\r\nimport CitySelector from './CitySelector';\r\nimport WeatherPanel from \"./WeatherPanel\";\r\nimport {AWFCity} from \"./awf.model\";\r\n\r\nexport interface WeeklyForecastState {\r\n    city?: AWFCity\r\n}\r\n\r\nclass WeeklyForecast extends React.Component<{}, WeeklyForecastState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            city: undefined\r\n        }\r\n    }\r\n\r\n    handleCityChange(city: AWFCity) {\r\n        this.setState({city})\r\n    }\r\n\r\n    render() {\r\n        return (<div className=\"awf-weekly-forecast awf-forecast-card\">\r\n            <h1 className=\"awf-forecast-card_label\">7 Days Forecast</h1>\r\n            <CitySelector onChange={(event: any) => this.handleCityChange(event)}/>\r\n            <WeatherPanel city={this.state.city} weekly={true}/>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default WeeklyForecast;\r\n","import React, {useEffect, useState} from 'react';\r\nimport CitySelector from \"./CitySelector\";\r\nimport WeatherPanel from \"./WeatherPanel\";\r\nimport {AWFCity} from \"./awf.model\";\r\n\r\nexport interface PastForecastState {\r\n    city?: AWFCity,\r\n    date?: Date\r\n}\r\n\r\nfunction PastForecast() {\r\n    const [city, setCity] = useState(undefined);\r\n    const [date, setDate] = useState(undefined);\r\n\r\n    const today: Date = new Date();\r\n    const maxDate = today.toISOString().substring(0, 10);\r\n\r\n    return (<div className=\"awf-past-forecast awf-forecast-card\">\r\n        <h1 className=\"awf-forecast-card_label\">Forecast for a Date in the Past</h1>\r\n        <div>\r\n            <CitySelector onChange={(event: any) => setCity(event)}/>\r\n            <input className={\"awf-field\"} type=\"date\" max={maxDate}\r\n                   onChange={(event: any) => setDate(event.target.valueAsDate)}></input>\r\n        </div>\r\n        <WeatherPanel city={city} date={date} weekly={false}/>\r\n    </div>);\r\n}\r\n\r\nexport default PastForecast;\r\n","import './App.css';\r\nimport WeeklyForecast from \"./WeeklyForecast\";\r\nimport PastForecast from \"./PastForecast\";\r\nimport React from \"react\";\r\n\r\nfunction App() {\r\n  return (\r\n      <div className=\"awf-forecast\">\r\n        <WeeklyForecast/>\r\n        <PastForecast/>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App/>, document.getElementById(\"root\"));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}